# JavaScript Presentation Slides (Markdown Format)

---

## ARRAYS

### What is an Array?

An array is a data structure used to store **multiple values of the same type** in a single variable.

There are two types of arrays:

* **One-dimensional (1D)** â€“ A simple list of elements.
* **Multi-dimensional (2D, 3D, etc.)** â€“ Arrays of arrays, like matrices.

### Example in Different Languages:

```js
// JavaScript
let arr = [1, 2, 3, 4];
```

```python
# Python
arr = [1, 2, 3, 4]
```

```cpp
// C++
int arr[4] = {1, 2, 3, 4};
```

```java
// Java
int[] arr = {1, 2, 3, 4};
```

### Common Array Methods in JavaScript

#### 1. `push()` â€“ Adds an element to the end of an array

```js
let fruits = ['apple', 'banana'];
fruits.push('orange');
console.log(fruits); // ['apple', 'banana', 'orange']
```

#### 2. `pop()` â€“ Removes the last element from an array

```js
fruits.pop();
console.log(fruits); // ['apple', 'banana']
```

#### 3. `shift()` â€“ Removes the first element from an array

```js
fruits.shift();
console.log(fruits); // ['banana']
```

#### 4. `unshift()` â€“ Adds an element to the beginning

```js
fruits.unshift('mango');
console.log(fruits); // ['mango', 'banana']
```

#### 5. `splice()` â€“ Adds/removes elements at a specific index

```js
fruits.splice(1, 0, 'grape');
console.log(fruits); // ['mango', 'grape', 'banana']
```

#### 6. `slice()` â€“ Returns a shallow copy of a portion

```js
let sliced = fruits.slice(0, 2);
console.log(sliced); // ['mango', 'grape']
```

#### 7. `indexOf()` â€“ Finds the index of an element

```js
console.log(fruits.indexOf('grape')); // 1
```

#### 8. `includes()` â€“ Checks if an element exists

```js
console.log(fruits.includes('banana')); // true
```

---

## FUNCTIONS

### What is a Function?

A function is a reusable block of code designed to perform a task.

### Function Declaration

```js
function greet(name) {
  console.log('Hello, ' + name);
}

greet('Jhennifer'); // Hello, Jhennifer
```

### Function Expression

```js
const greet = function(name) {
  console.log('Hi ' + name);
};

greet('Chioma');
```

### Arrow Functions

```js
const add = (a, b) => a + b;
console.log(add(2, 3)); // 5
```

### Parameters vs Arguments

* **Parameters** are the names listed in the function definition.
* **Arguments** are the real values passed to the function.

### Return Statement

```js
function square(x) {
  return x * x;
}

let result = square(4);
console.log(result); // 16
```

---

## LOOPS

### What are Loops?

Loops are used to repeat a block of code a number of times.

### 1. For Loop

```js
for (let i = 0; i < 5; i++) {
  console.log(i);
}
```

### 2. While Loop

```js
let i = 0;
while (i < 5) {
  console.log(i);
  i++;
}
```

### 3. Do...While Loop

```js
let i = 0;
do {
  console.log(i);
  i++;
} while (i < 5);
```

### 4. For...of Loop (used with arrays)

```js
let colors = ['red', 'green', 'blue'];
for (let color of colors) {
  console.log(color);
}
```

### 5. For...in Loop (used with objects)

```js
let person = { name: 'Jhennifer', age: 22 };
for (let key in person) {
  console.log(key + ': ' + person[key]);
}
```

---

## OBJECTS

### What is an Object?

Objects store data in **key-value pairs** and are one of the fundamental building blocks in JavaScript.

```js
const car = {
  brand: 'Toyota',
  model: 'Corolla',
  year: 2020
};
```

### Accessing Object Properties

#### Dot Notation

Use dot notation to directly access a property by name.

```js
console.log(car.brand); // Toyota
```

#### Bracket Notation

Use bracket notation when property names are dynamic or contain special characters.

```js
console.log(car['model']); // Corolla
```

### Adding/Updating Properties

You can add new properties or update existing ones using dot or bracket notation.

```js
car.color = 'Red';
car.year = 2022;
```

### Deleting Properties

Remove a property from an object using the `delete` keyword.

```js
delete car.model;
```

### Nested Objects

Objects can contain other objects as values, creating a nested structure.

```js
const user = {
  name: 'Jhennifer',
  address: {
    city: 'Lagos',
    country: 'Nigeria'
  }
};

console.log(user.address.city); // Lagos
```

### Object Methods

Functions can be stored as object propertiesâ€”these are called methods.

```js
const dog = {
  name: 'Lucky',
  bark: function () {
    console.log('Woof!');
  }
};

dog.bark(); // Woof!
```

### Shorthand Method

You can write methods in a shorthand syntax.

```js
const cat = {
  name: 'Milo',
  meow() {
    console.log('Meow!');
  }
};

cat.meow(); // Meow!
```

### Looping Through an Object

Use a `for...in` loop to iterate through all keys in an object.

```js
const student = {
  name: 'Chioma',
  age: 22,
  course: 'Philosophy'
};

for (let key in student) {
  console.log(key + ': ' + student[key]);
}
```

---

*You're doing great, Jhen Jhen ðŸ’–. Just copy and paste this entire markdown into your VS Code slide and you're good to go!*



,
  "buildCommand": "npm run build",
  "outputDirectory": "dist"