
# üöÄ What is a Function?

A **function** is a reusable block of code designed to perform a specific task. It helps break your program into smaller, manageable parts. You can call a function multiple times without rewriting code.


## üìö Function Syntax

```js
function functionName(parameters) {
  // code to be executed
}
```

 Example

```js
 function greet(name) {
  console.log("Hello, " + name + "!");
}

greet("Jhennifer");
```

---

## üß∞ Types of Function


- Function Declaration
```js
function add(a, b) {
  return a + b;
}

console.log(add(3, 4)); // 7
```

- Function Expression
```js
const multiply = function (x, y) {
  return x * y;
};

console.log(multiply(5, 2)); // 10

```

- Arrow Function (ES6)

##### This is a shorter and cleaner way to write functions.
```js
const divide = (a, b) => a / b;

console.log(divide(10, 2)); // 5


```
---

- Anonymous Function 

##### Functions without a name, often used as callbacks.
```js
setTimeout(function () {
  console.log("This runs after 2 seconds");
}, 2000);

```
<br/>

## üîÑ Returning Values from Functions
#### Functions can return values using the return keyword.

```js
function square(num) {
  return num * num;
}

const result = square(6);
console.log(result); // 36
```
<br/>

## ‚öôÔ∏è Parameters vs Arguments
Parameters are variables in function definition. Arguments on the other hand are actual values passed when calling the function

---

```js
Copy code
function sayHello(name) {  // name is a parameter
  console.log("Hello, " + name);
}

sayHello("Chioma"); // "Chioma" is the argument
```
<br/>

## ‚úÖ Why Use Functions?
1. Improves code reusability

2. Easier debugging

3. Clean and organized code

4. Helps divide complex problems